import telebot
import time
from guide import commands_help
from telebot import types

bot = telebot.TeleBot("CENSORED")
users_last_request_time = {}



# =================== –≠–¢–û–¢ –ë–õ–û–ö –û–¢–í–ï–ß–ê–ï–¢ –ó–ê –ü–û–†–ê–ñ–ï–ù–ò–ï –ë–û–¢–ê –ò –ù–ê–ß–ê–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´ ===================
@bot.message_handler(commands=['start'])
def main(message):
    markup = types.InlineKeyboardMarkup()
    btn_info = types.InlineKeyboardButton('D&D –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', url='https://telegra.ph/DD-Instruction-10-01')
    btn_get_id = types.InlineKeyboardButton('–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π ID', callback_data='info_button')
    btn_commands = types.InlineKeyboardButton('–ó–∞—á–µ–º –Ω—É–∂–Ω–∞ –ê–Ω–∫–µ—Ç–∞?', callback_data='commands')
    markup.add(btn_info)
    markup.add(btn_commands, btn_get_id)
    bot.send_message(message.chat.id, f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ D&D, {message.from_user.first_name}!</b>", parse_mode='html', reply_markup=markup)

# ================================================================================================



# =================== –≠–¢–û–¢ –ë–õ–û–ö –û–¢–í–ï–ß–ê–ï–¢ –ó–ê –ù–ê–°–¢–†–û–ô–ö–ò –ò–ì–†–´ ===================
@bot.message_handler(commands=['game_setting'])
def starting_game(message):
    markup = types.InlineKeyboardMarkup()
    btn_join = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç', url='https://t.me/jaspblck_reminder_bot?startgroup=true')
    btn_done = types.InlineKeyboardButton('–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥', callback_data='done')
    markup.add(btn_join, btn_done)
    bot.send_message(message.chat.id, "<b>–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≤–∞—à—É —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É:</b>", parse_mode='html', reply_markup=markup)

# ================================================================================================



# =================== –≠–¢–û–¢ –ë–õ–û–ö –û–¢–í–ï–ß–ê–ï–¢ –ó–ê –ü–û–ö–ê–ó –ö–û–ú–ê–ù–î –ë–û–¢–ê ===================
@bot.callback_query_handler(func=lambda call: call.data == 'commands')
def helper_commands(call):
    bot.send_message(call.message.chat.id, f"<b>{commands_help}</b>", parse_mode='html')

# ================================================================================================



# =================== –≠–¢–û–¢ –ë–õ–û–ö –û–¢–í–ï–ß–ê–ï–¢ –ó–ê –û–¢–í–ï–¢ –ù–ê –ó–ê–ü–†–û–° –ò–î–ï–ù–¢–ò–§–ò–ö–ê–¢–û–†–ê ===================
@bot.callback_query_handler(func=lambda call: call.data == 'info_button')
def id_query(call):
    user_info = (
        f"ID: {call.from_user.id}\n"
        f"Name: {call.from_user.first_name}\n"
        f"Username: {call.from_user.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
    )
    bot.send_message(call.message.chat.id, user_info)

# ================================================================================================



# =================== –≠–¢–û–¢ –ë–õ–û–ö –û–¢–í–ï–ß–ê–ï–¢ –ó–ê –í–´–ë–û–† –ö–ê–†–¢–´ ========================================
@bot.callback_query_handler(func=lambda call: call.data == 'maps')
def choose_maps(call):
    map1_path = 'C:/Users/jasper/Desktop/telegram-bot/maps/map1.png'
    with open(map1_path, 'rb') as mp1:
        bot.send_photo(call.message.chat.id, mp1)

    markup = types.InlineKeyboardMarkup()
    btn_plus = types.InlineKeyboardButton('‚ûï', callback_data='choise1')
    btn_minus = types.InlineKeyboardButton('‚ûñ', callback_data='choise2')
    markup.add(btn_plus, btn_minus)
    bot.reply_to(call.message, "–ï—Å–ª–∏ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∫–∞—Ä—Ç–∞ + / –ï—Å–ª–∏ –Ω–µ—Ç -")
    bot.send_message(call.message.chat.id, "–í—ã–±–∏—Ä–∞–π", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'choise1')
def handle_plus(call):
    bot.send_message(call.message.chat.id, "–†–∞–¥, —á—Ç–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∫–∞—Ä—Ç–∞! –û—Ç–ø—Ä–∞–≤–ª—è–π —Ç–µ–ø–µ—Ä—å —ç—Ç—É –∫–∞—Ä—Ç—É –≤ –≥—Ä—É–ø–ø—É üòä")

@bot.callback_query_handler(func=lambda call: call.data == 'choise2')
def handle_minus(call):
    bot.send_message(call.message.chat.id, "–ñ–∞–ª—å, —á—Ç–æ –∫–∞—Ä—Ç–∞ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å. üòû")

# ================================================================================================


# =================== –≠–¢–û–¢ –ë–õ–û–ö –û–¢–í–ï–ß–ê–ï–¢ –ó–ê –ü–û–õ–£–ß–ï–ù–ò–ï –ê–ù–ö–ï–¢–´ ===================
@bot.callback_query_handler(func=lambda call: call.data == 'done')
def send_file_to_user(call):
    current_time = time.time()
    cooldown_period = 5 * 60  
    if call.message.chat.id in users_last_request_time:
        last_request_time = users_last_request_time[call.message.chat.id]
        if current_time < last_request_time + cooldown_period:
            time_left = int((last_request_time + cooldown_period - current_time) / 60)
            bot.send_message(call.message.chat.id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {time_left} –º–∏–Ω—É—Ç(—ã) –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –∞–Ω–∫–µ—Ç—ã. ‚è≥")
            return

    file_path = 'C:/Users/jasper/Desktop/telegram-bot/file.txt'
    with open(file_path, 'rb') as file:
        bot.send_document(call.message.chat.id, file)
    bot.send_message(call.message.chat.id, "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –≤ —ç—Ç–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±—Ä–∞—Ç–Ω–æ!</b>", parse_mode='html')

    users_last_request_time[call.message.chat.id] = current_time

# ================================================================================================



# =================== –≠–¢–û–¢ –ë–õ–û–ö –û–¢–í–ï–ß–ê–ï–¢ –ó–ê –û–¢–ü–†–ê–í–ö–£ –í–ê–®–ï–ô –ê–ù–ö–ï–¢–´ –í –ì–†–£–ü–ü–£ ===================
try:
    @bot.message_handler(content_types=['document'])
    def handle_document(message):
        if message.document.mime_type == 'text/plain':
            chat_id = '@jasrblck_dnd'
            markup = types.InlineKeyboardMarkup()
            btn_map = types.InlineKeyboardButton('–í—ã–±—Ä–∞—Ç—å –ö–∞—Ä—Ç—É', callback_data='maps')
            markup.add(btn_map)
            bot.send_message(message.chat.id, "–§–∞–π–ª –ø—Ä–∏–Ω—è—Ç! üìÑ –û—Å—Ç–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É:", reply_markup=markup)
            bot.forward_message(chat_id, message.chat.id, message.message_id)
        else:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt. ‚ùå")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞: {e}")

# ================================================================================================

bot.polling(none_stop=True)
